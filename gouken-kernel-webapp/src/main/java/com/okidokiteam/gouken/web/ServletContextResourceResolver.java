package com.okidokiteam.gouken.web;import java.io.IOException;import java.io.InputStream;import javax.servlet.ServletContext;import org.ops4j.base.io.InputStreamSource;import org.ops4j.pax.repository.Artifact;import org.ops4j.pax.repository.ArtifactQuery;import org.ops4j.pax.repository.RepositoryException;import org.ops4j.pax.repository.Resolver;import org.ops4j.pax.repository.maven.GavArtifactQuery;import org.ops4j.pax.repository.maven.GavArtifactQueryParser;import org.ops4j.store.Handle;import org.ops4j.store.Store;/** * */public class ServletContextResourceResolver implements Resolver{    final private ServletContext m_servletContext;    final private Store<InputStream> m_store;    final private GavArtifactQueryParser m_parser;    public ServletContextResourceResolver( Store<InputStream> store, ServletContext servletContext )    {        m_servletContext = servletContext;        m_store = store;        m_parser = new GavArtifactQueryParser();    }    public Artifact find( ArtifactQuery artifactQuery )        throws RepositoryException    {        return queryFromContext( parseQuery( artifactQuery ) );    }    private Artifact queryFromContext( String s )        throws RepositoryException    {        try        {            InputStream stream = m_servletContext.getResourceAsStream( s );            if( stream != null )            {                return getArtifact( m_store.store( stream ) );            }            else            {                throw new RepositoryException( "Unable to load resource " + s + " from Web Context Resources." );            }        } catch( IOException e )        {            throw new RepositoryException( "IO Error while caching resource " + s, e );        }    }    private String parseQuery( ArtifactQuery artifactQuery )    {        GavArtifactQuery query = m_parser.parse( artifactQuery );        // construct presumable path:        return "/WEB-INF/bundles/" + query.getArtifactId() + "." + query.getClassifier();    }    private Artifact getArtifact( final Handle handle )        throws IOException    {        assert handle != null : "handle is never null";        return new Artifact()        {            public InputStreamSource getContent()                throws RepositoryException            {                return new InputStreamSource()                {                    public InputStream get()                        throws IOException                    {                        return m_store.load( handle );                    }                };            }        };    }}